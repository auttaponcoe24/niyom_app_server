generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "linux-arm64-openssl-1.1.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Prefix {
  id          Int        @id @default(autoincrement())
  prefix_name String
  Customers   Customer[]
  createAt    DateTime   @default(now())
  updateAt    DateTime   @updatedAt
}

model Zone {
  id           Int           @id @default(autoincrement())
  zone_name    String?       @unique
  customers    Customer[]
  createAt     DateTime      @default(now())
  updateAt     DateTime      @updatedAt
  Transactions Transaction[]
}

model User {
  id         String    @id @default(uuid())
  firstname  String
  lastname   String?
  card_id    String    @unique @db.VarChar(13) // กำหนดไม่เกิน 13 ตัว
  email      String?   @unique
  password   String
  role       RoleUser  @default(USER)
  customerId String?   @unique
  customer   Customer? @relation(fields: [customerId], references: [id])
  payments   Payment[]
  createAt   DateTime  @default(now())
  updateAt   DateTime  @updatedAt
}

model Customer {
  id           String        @id @default(uuid())
  firstname    String
  lastname     String?
  card_id      String        @unique @db.VarChar(13) // กำหนดไม่เกิน 13 ตัว
  phone        String?
  house_number String?
  address      String?
  status       StatueUser    @default(PENDING)
  prefixId     Int?
  prefix       Prefix?       @relation(fields: [prefixId], references: [id])
  zoneId       Int?
  zone         Zone?         @relation(fields: [zoneId], references: [id])
  units        Unit[]
  transactions Transaction[]
  createAt     DateTime      @default(now())
  updateAt     DateTime      @updatedAt
  user         User? // One-to-One relation with User
}

model Unit {
  id          Int             @id @default(autoincrement())
  month       String
  year        String
  type        TypeTransaction @default(W)
  unit_number Int?
  customerId  String
  customer    Customer        @relation(fields: [customerId], references: [id])
  createAt    DateTime        @default(now())
  updateAt    DateTime?       @updatedAt

  // ความสัมพันธ์แบบ one-to-one กับ Transaction
  oldTransactions Transaction[] @relation("UnitOld")
  newTransactions Transaction[] @relation("UnitNew")
}

model Transaction {
  id    Int             @id @default(autoincrement())
  month String?
  year  String?
  type  TypeTransaction @default(W)

  // ความสัมพันธ์แบบ one-to-one กับ Unit
  unit_old    Unit? @relation("UnitOld", fields: [unit_old_id], references: [id])
  unit_old_id Int?

  unit_new    Unit? @relation("UnitNew", fields: [unit_new_id], references: [id])
  unit_new_id Int?

  unit_used   Int? // หน่วยน้ำที่ใช้
  amount      Int? // จำนวนค่าน้ำที่คิดจากหน่วย
  over_due    Int?
  total_price Int?
  status      BillStatus @default(PENDING)
  zoneId      Int?
  zone        Zone?      @relation(fields: [zoneId], references: [id])
  customerId  String?
  customer    Customer?  @relation(fields: [customerId], references: [id])
  payments    Payment[]
  createAt    DateTime   @default(now())
  updateAt    DateTime   @updatedAt
}

model Payment {
  id            Int         @id @default(autoincrement())
  slipPayment   String?
  amount        Int // จำนวนเงินที่ชำระ
  paymentDate   DateTime // วันที่ชำระ
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId Int
  user          User?       @relation(fields: [userId], references: [id])
  userId        String?
  createAt      DateTime    @default(now())
  updateAt      DateTime    @updatedAt
}

enum BillStatus {
  PAID
  PENDING
  OVERDUE
}

enum RoleUser {
  ADMIN
  USER
}

enum StatueUser {
  PENDING
  REJECT
  SUCCESS
}

enum TypeTransaction {
  W
  E
}

enum StatusPayment {
  PENDING
  REJECT
  SUCCESS
}
