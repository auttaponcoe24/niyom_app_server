generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Prefix {
  id         Int    @id @default(autoincrement())
  prefixName String

  createAt  DateTime   @default(now())
  updateAt  DateTime   @updatedAt
  customers Customer[]
}

model Zone {
  id           Int           @id @default(autoincrement())
  zoneName     String?       @unique
  createAt     DateTime      @default(now())
  updateAt     DateTime      @updatedAt
  transactions Transaction[]
  customers    Customer[]
  units        Unit[]
}

model User {
  id        String    @id @default(uuid())
  firstName String?
  lastName  String?
  cardId    String?   @unique @db.VarChar(13) // กำหนดไม่เกิน 13 ตัว
  email     String?   @unique
  password  String?
  role      Role      @default(USER)
  payments  Payment[]
  createAt  DateTime  @default(now())
  updateAt  DateTime  @updatedAt

  // one-to-one
  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?   @unique
}

model Customer {
  id           String        @id @default(uuid())
  imgProfile   String?
  firstName    String?
  lastName     String?
  cardId       String?       @unique @db.VarChar(13) // กำหนดไม่เกิน 13 ตัว
  role         Role          @default(CUSTOMER)
  phoneNumber  String?
  houseNumber  String?
  address      String?
  prefix       Prefix?       @relation(fields: [prefixId], references: [id])
  prefixId     Int?
  zone         Zone?         @relation(fields: [zoneId], references: [id])
  zoneId       Int?
  units        Unit[]
  transactions Transaction[]
  createAt     DateTime      @default(now())
  updateAt     DateTime      @updatedAt
  user         User?
}

model Unit {
  id         Int             @id @default(autoincrement())
  date       DateTime?
  month      String?
  year       String?
  type       TypeTransaction @default(W)
  unitNumber Int?
  createAt   DateTime        @default(now())
  updateAt   DateTime        @updatedAt

  customer        Customer?    @relation(fields: [customerId], references: [id])
  customerId      String?
  zone            Zone?        @relation(fields: [zoneId], references: [id])
  zoneId          Int?
  // ความสัมพันธ์แบบ one-to-one กับ Transaction
  oldTransactions Transaction? @relation("UnitOld")
  newTransactions Transaction? @relation("UnitNew")
}

model Transaction {
  id    Int             @id @default(autoincrement())
  date  DateTime?
  month String?
  year  String?
  type  TypeTransaction @default(W)

  // ความสัมพันธ์แบบ one-to-one กับ Unit
  unitOld   Unit? @relation("UnitOld", fields: [unitOldId], references: [id])
  unitOldId Int?  @unique

  unitNew   Unit? @relation("UnitNew", fields: [unitNewId], references: [id])
  unitNewId Int?  @unique

  unitUsed   Int? // หน่วยน้ำที่ใช้
  amount     Int? // จำนวนค่าน้ำที่คิดจากหน่วย
  overDue    Int?
  totalPrice Int?
  status     Status?
  Customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?
  zone       Zone?     @relation(fields: [zoneId], references: [id])
  zoneId     Int?
  payment    Payment[]
  createAt   DateTime  @default(now())
  updateAt   DateTime  @updatedAt
}

model Payment {
  id            Int         @id @default(autoincrement())
  date          DateTime? // วันที่ชำระ
  imgSlip       String
  amount        Int? // จำนวนเงินที่ชำระ
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId Int
  status        Status?
  user          User?       @relation(fields: [userId], references: [id])
  userId        String?
  approveby     String?
  createAt      DateTime    @default(now())
  updateAt      DateTime    @updatedAt
}

enum Role {
  ADMIN
  USER
  CUSTOMER
}

enum TypeTransaction {
  W
  E
}

enum Status {
  PENDING
  REJECT
  SUCCESS
}
