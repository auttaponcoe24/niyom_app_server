generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "linux-arm64-openssl-1.1.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Prefix {
  id         Int    @id @default(autoincrement())
  prefixName String @map("prefix_name")

  createdAt DateTime   @default(now()) @map("created_At")
  updatedAt DateTime?  @updatedAt @map("updated_at")
  customers Customer[]

  @@map("prefixs")
}

model Zone {
  id       Int     @id @default(autoincrement())
  zoneName String? @unique @map("zone_name")

  createdAt    DateTime      @default(now()) @map("created_At")
  updatedAt    DateTime?     @updatedAt @map("updated_at")
  customers    Customer[]
  transactions Transaction[]
  units        Unit[]

  @@map("zones")
}

model User {
  id         String    @id @default(uuid())
  firstName  String?   @map("first_name")
  lastName   String?   @map("last_name")
  cardId     String?   @unique @map("card_id") @db.VarChar(13) // กำหนดไม่เกิน 13 ตัว
  email      String    @unique
  password   String
  role       RoleUser  @default(USER)
  customerId String?   @unique @map("customer_id")
  customer   Customer? @relation(fields: [customerId], references: [id])

  createdAt    DateTime      @default(now()) @map("created_At")
  updatedAt    DateTime?     @updatedAt @map("updated_at")
  transactions Transaction[]

  @@map("users")
}

model Customer {
  id                String        @id @default(uuid())
  no                Int?
  firstName         String?       @map("first_name")
  lastName          String?       @map("last_name")
  cardId            String?       @unique @map("card_id") @db.VarChar(13) // กำหนดไม่เกิน 13 ตัว
  phoneNumber       String?       @map("phone_number")
  houseNumber       String?       @map("house_number")
  address           String?
  isActive          Boolean       @default(true)
  prefixId          Int?          @map("prefix_id")
  prefix            Prefix?       @relation(fields: [prefixId], references: [id])
  zoneId            Int?          @map("zone_id")
  zone              Zone?         @relation(fields: [zoneId], references: [id])
  isServiceWater    Boolean       @default(false) @map("is_service_water")
  isServiceElectric Boolean       @default(false) @map("is_service_electric")
  createdAt         DateTime      @default(now()) @map("created_At")
  updatedAt         DateTime?     @updatedAt @map("updated_at")
  units             Unit[]
  transactions      Transaction[]
  user              User? // One-to-One relation with User

  @@map("customers")
}

model Unit {
  id         Int             @id @default(autoincrement())
  date       DateTime
  type       TypeTransaction @default(W)
  unitNumber Int?            @map("unit_number")
  customerId String          @map("customer_id")
  customer   Customer        @relation(fields: [customerId], references: [id], onDelete: Cascade)
  zoneId     Int?            @map("zone_id")
  zone       Zone?           @relation(fields: [zoneId], references: [id])
  createdAt  DateTime        @default(now()) @map("created_At")
  updatedAt  DateTime?       @updatedAt @map("updated_at")

  // ความสัมพันธ์แบบ one-to-one กับ Transaction
  oldTransactions Transaction[] @relation("UnitOld")
  newTransactions Transaction[] @relation("UnitNew")

  @@map("units")
}

model Transaction {
  id   Int             @id @default(autoincrement())
  date DateTime
  type TypeTransaction @default(W)

  // ความสัมพันธ์แบบ one-to-one กับ Unit
  unitOld   Unit? @relation("UnitOld", fields: [unitOldId], references: [id])
  unitOldId Int?  @map("unit_old_id")

  unitNew   Unit? @relation("UnitNew", fields: [unitNewId], references: [id])
  unitNewId Int?  @map("unit_new_id")

  unitUsed   Int?       @map("unit_used") // หน่วยน้ำที่ใช้
  amount     Int? // จำนวนค่าน้ำที่คิดจากหน่วย
  overDue    Int?       @map("over_due") // ยอดค้าง
  total      Int?       @map("total")
  pay        Int?
  remain     Int?
  status     BillStatus @default(WAITING)
  zoneId     Int?       @map("zone_id")
  zone       Zone?      @relation(fields: [zoneId], references: [id])
  customerId String?    @map("customer_id")
  customer   Customer?  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  approvedBy String?    @map("approved_by")
  approved   User?      @relation(fields: [approvedBy], references: [id])
  approvedAt DateTime?  @map("approved_at")

  createdAt DateTime  @default(now()) @map("created_At")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("transactions")
}

enum BillStatus {
  WAITING
  PAY
}

enum RoleUser {
  ADMIN
  USER
}

enum StatueUser {
  PENDING
  REJECT
  SUCCESS
}

enum TypeTransaction {
  W
  E
}

enum StatusPayment {
  PENDING
  REJECT
  SUCCESS
}
