generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "linux-arm64-openssl-1.1.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Prefix {
  id         Int    @id @default(autoincrement())
  prefixName String @map("prefix_name")

  createdAt DateTime   @default(now()) @map("created_At")
  updatedAt DateTime?  @updatedAt @map("updated_at")
  customers Customer[]

  @@map("prefixs")
}

model Zone {
  id       Int     @id @default(autoincrement())
  zoneName String? @unique @map("zone_name")

  createdAt    DateTime      @default(now()) @map("created_At")
  updatedAt    DateTime?     @updatedAt @map("updated_at")
  customers    Customer[]
  transactions Transaction[]

  @@map("zones")
}

model User {
  id         String    @id @default(uuid())
  firstName  String?   @map("first_name")
  lastName   String?   @map("last_name")
  cardId     String?   @unique @map("card_id") @db.VarChar(13) // กำหนดไม่เกิน 13 ตัว
  email      String    @unique
  password   String
  role       RoleUser  @default(USER)
  customerId String?   @unique @map("customer_id")
  customer   Customer? @relation(fields: [customerId], references: [id])

  createdAt DateTime  @default(now()) @map("created_At")
  updatedAt DateTime? @updatedAt @map("updated_at")
  payments  Payment[]

  @@map("users")
}

model Customer {
  id           String        @id @default(uuid())
  firstName    String?
  lastName     String?
  cardId       String?       @unique @map("card_id") @db.VarChar(13) // กำหนดไม่เกิน 13 ตัว
  phone        String?
  houseNumber  String?       @map("house_number")
  address      String?
  isActive     Boolean       @default(true)
  prefixId     Int?          @map("prefix_id")
  prefix       Prefix?       @relation(fields: [prefixId], references: [id])
  zoneId       Int?          @map("zone_id")
  zone         Zone?         @relation(fields: [zoneId], references: [id])
  createdAt    DateTime      @default(now()) @map("created_At")
  updatedAt    DateTime?     @updatedAt @map("updated_at")
  units        Unit[]
  transactions Transaction[]
  user         User? // One-to-One relation with User

  @@map("customers")
}

model Unit {
  id         Int             @id @default(autoincrement())
  // month      String
  // year       String
  date       DateTime?
  type       TypeTransaction @default(W)
  unitNumber Int?            @map("unit_number")
  customerId String          @map("customer_id")
  customer   Customer        @relation(fields: [customerId], references: [id], onDelete: Cascade)
  createdAt  DateTime        @default(now()) @map("created_At")
  updatedAt  DateTime?       @updatedAt @map("updated_at")

  // ความสัมพันธ์แบบ one-to-one กับ Transaction
  oldTransactions Transaction[] @relation("UnitOld")
  newTransactions Transaction[] @relation("UnitNew")

  @@map("units")
}

model Transaction {
  id   Int             @id @default(autoincrement())
  // month String?
  // year  String?
  date DateTime?
  type TypeTransaction @default(W)

  // ความสัมพันธ์แบบ one-to-one กับ Unit
  unitOld   Unit? @relation("UnitOld", fields: [unitOldId], references: [id])
  unitOldId Int?  @map("unit_old_id")

  unitNew   Unit? @relation("UnitNew", fields: [unitNewId], references: [id])
  unitNewId Int?  @map("unit_new_id")

  unitUsed   Int?       @map("unit_used") // หน่วยน้ำที่ใช้
  amount     Int? // จำนวนค่าน้ำที่คิดจากหน่วย
  overDue    Int?       @map("over_due")
  totalPrice Int?       @map("total_price")
  status     BillStatus @default(PENDING)
  zoneId     Int?       @map("zone_id")
  zone       Zone?      @relation(fields: [zoneId], references: [id])
  customerId String?    @map("customer_id")
  customer   Customer?  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  payments   Payment[]
  createdAt  DateTime   @default(now()) @map("created_At")
  updatedAt  DateTime?  @updatedAt @map("updated_at")

  @@map("transactions")
}

model Payment {
  id            Int         @id @default(autoincrement())
  slipPayment   String?
  amount        Int // จำนวนเงินที่ชำระ
  paymentDate   DateTime // วันที่ชำระ
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId Int
  user          User?       @relation(fields: [userId], references: [id])
  userId        String?
  createdAt     DateTime    @default(now()) @map("created_At")
  updatedAt     DateTime?   @updatedAt @map("updated_at")

  @@map("payments")
}

enum BillStatus {
  PAID
  PENDING
  OVERDUE
}

enum RoleUser {
  ADMIN
  USER
}

enum StatueUser {
  PENDING
  REJECT
  SUCCESS
}

enum TypeTransaction {
  W
  E
}

enum StatusPayment {
  PENDING
  REJECT
  SUCCESS
}
