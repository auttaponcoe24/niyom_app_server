// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum role_enum {
  OWNER
  CUSTOMER
}

enum status_enum {
  PENDING
  REJECT
  SUCCESS
}

model User {
  id          String      @id @default(uuid())
  firstname   String
  lastname    String
  id_passpost String      @unique
  address     String
  mail        String      @unique
  password    String
  role        role_enum   @default(CUSTOMER)
  status      status_enum @default(PENDING)
  createAt    DateTime    @default(now())
  updateAt    DateTime    @updatedAt
  Payments    Payment[]
}

model Customer {
  id           Int      @id @default(autoincrement())
  id_passpost  String   @unique
  firstname    String
  lastname     String
  phone_number String   @unique
  house_number String
  createAt     DateTime @default(now())
  updateAt     DateTime @updatedAt
  ZoneId       Int
  zone         Zone     @relation(fields: [zoneId], references: [id])
  zoneId       Int
}

model Zone {
  id           Int           @id @default(autoincrement())
  zone_name    String        @unique
  Customers    Customer[]
  Transactions Transaction[]
}

enum type_transaction {
  W
  E
}

model Transaction {
  id            Int              @id @default(autoincrement())
  month         String
  year          String
  unit_old_date Int
  unit_new_date Int
  price         Decimal          @db.Decimal(10, 2)
  over_due      Decimal?         @db.Decimal(10, 2)
  total_price   Decimal          @db.Decimal(10, 2)
  type          type_transaction @default(W)
  createAt      DateTime         @default(now())
  updateAt      DateTime         @updatedAt
  zoneId        Int
  zone          Zone             @relation(fields: [zoneId], references: [id])
  paymentId     Int
  payment       Payment          @relation(fields: [paymentId], references: [id])
}

enum status_payment {
  PENDING
  REJECT
  SUCCESS
}

model Payment {
  id           Int            @id @default(autoincrement())
  slip_payment String?
  status       status_payment @default(PENDING)
  createAt     DateTime       @default(now())
  updateAt     DateTime       @updatedAt
  Transactions Transaction[]
  userId       String
  user         User           @relation(fields: [userId], references: [id])
}
