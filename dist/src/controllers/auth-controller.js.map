{"version":3,"sources":["../../../src/controllers/auth-controller.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport prisma from '../models/prisma';\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport { loginSchema } from '@/validators/auth-validator';\nimport createError from '@/utils/create-error';\nimport Joi from 'joi';\n\nexport const register = async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const { email, password } = req.body;\n\n    // Hash the password\n    const hashPassword = await bcrypt.hash(password, 12);\n\n    // Create the user in the database\n    const data = await prisma.user.create({\n      data: {\n        email: email,\n        password: hashPassword,\n      },\n    });\n\n    const payload = {\n      id: data.id,\n      id_passpost: data.id_passpost,\n      firstname: data.firstname,\n      lastname: data.lastname,\n      role: data.role,\n    };\n\n    const accessToken = jwt.sign(payload, process.env.JWT_SECREY_KEY || 'secretKeyRandom', { expiresIn: process.env.JWT_EXPIRES_IN || '30d' });\n\n    delete data.password;\n    // Send a response back to the client\n    res.status(201).json({\n      message: 'ok',\n      user: data,\n      accessToken: accessToken,\n    });\n  } catch (error) {\n    next(error); // Pass errors to the error handler middleware\n  }\n};\n\nexport const login = async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const {\n      value,\n      error,\n    }: {\n      value: {\n        email: string;\n        password: string;\n      };\n      error: Joi.ValidationError;\n    } = loginSchema.validate(req.body);\n\n    if (error) {\n      return next(createError('email incorrect or password incorrect', 400));\n    }\n\n    const user = await prisma.user.findUnique({\n      where: {\n        email: value.email,\n      },\n    });\n\n    if (!user) {\n      return next(createError('mail is not found', 400));\n    }\n\n    const isMatch = await bcrypt.compare(value.password, user.password);\n    if (!isMatch) {\n      return next(createError('password incorrect', 400));\n    }\n\n    const payload = {\n      id: user.id,\n      id_passpost: user.id_passpost,\n      firstname: user.firstname,\n      lastname: user.lastname,\n      role: user.role,\n    };\n\n    const accessToken = jwt.sign(payload, process.env.JWT_SECRET_KEY || 'secretKeyRandom', { expiresIn: process.env.JWT_EXPIRES_IN || '30d' });\n\n    delete user.password;\n\n    res.status(200).json({\n      message: 'ok',\n      user: user,\n      accessToken: accessToken,\n    });\n  } catch (error) {\n    next(error);\n  }\n};\n\nexport const getProfile = async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    res.status(200).json({ message: 'ok', user: req.user });\n  } catch (error) {\n    next(error);\n  }\n};\n\nexport const editProfile = async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const { id } = req.user;\n    const { firstname, lastname, id_passpost, address } = req.body;\n\n    const findUser = await prisma.user.update({\n      where: {\n        id: id,\n      },\n      data: {\n        firstname,\n        lastname,\n        id_passpost,\n        address,\n      },\n    });\n\n    res.status(201).json({ message: 'ok', result: findUser });\n  } catch (error) {\n    next(error);\n  }\n};\n\nexport const updateAccess = async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const { role } = req.user;\n    const { id, update } = req.query;\n\n    if (role !== 'ADMIN') {\n      return next(createError('is not admin', 401));\n    }\n\n    const findUser = await prisma.user.findUnique({\n      where: {\n        id: id as string,\n      },\n    });\n\n    if (update === 'SUCCESS') {\n      const result = await prisma.user.update({\n        where: {\n          id: findUser.id,\n        },\n        data: {\n          status: 'SUCCESS',\n        },\n      });\n      res.status(201).json({ message: 'ok', result });\n    } else if (update === 'REJECT') {\n      const result = await prisma.user.update({\n        where: {\n          id: findUser.id,\n        },\n        data: {\n          status: 'REJECT',\n        },\n      });\n      res.status(201).json({ message: 'ok', result });\n    } else {\n      return next(createError('update is missing', 401));\n    }\n  } catch (error) {\n    next(error);\n  }\n};\n"],"names":["editProfile","getProfile","login","register","updateAccess","req","res","next","email","password","body","hashPassword","bcrypt","hash","data","prisma","user","create","payload","id","id_passpost","firstname","lastname","role","accessToken","jwt","sign","process","env","JWT_SECREY_KEY","expiresIn","JWT_EXPIRES_IN","status","json","message","error","value","loginSchema","validate","createError","findUnique","where","isMatch","compare","JWT_SECRET_KEY","address","findUser","update","result","query"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}