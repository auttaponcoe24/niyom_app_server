{"version":3,"sources":["../../../src/controllers/transaction-controller.ts"],"sourcesContent":["import prisma from \"@/models/prisma\";\nimport { NextFunction, Request, Response } from \"express\";\n\nexport const createTransaction = async (\n\treq: Request,\n\tres: Response,\n\tnext: NextFunction\n) => {\n\ttry {\n\t\tconst {\n\t\t\tmonth,\n\t\t\tyear,\n\t\t\tunit_old_date,\n\t\t\tunit_new_date,\n\t\t\ttype,\n\t\t\tzoneId,\n\t\t\tpaymentId,\n\t\t\tcustomerId,\n\t\t} = req.body;\n\n\t\tconst transaction = await prisma.transaction.create({\n\t\t\tdata: {\n\t\t\t\tmonth,\n\t\t\t\tyear,\n\t\t\t\tunit_old_date,\n\t\t\t\tunit_new_date,\n\t\t\t\ttype,\n\t\t\t\tzoneId,\n\t\t\t\tpaymentId,\n\t\t\t\tcustomerId,\n\t\t\t},\n\t\t});\n\n\t\tlet resultCal = {\n\t\t\tprice: 0,\n\t\t\tover_due: 0,\n\t\t\ttotal_price: 0,\n\t\t} as any;\n\n\t\tif (transaction.type === \"W\") {\n\t\t\tresultCal.price =\n\t\t\t\t(transaction.unit_new_date - transaction.unit_old_date) * 16 + 50;\n\t\t} else if (transaction.type === \"E\") {\n\t\t\tlet a = (transaction.unit_new_date - transaction.unit_old_date) * 7 + 50;\n\t\t\tlet b =\n\t\t\t\t((transaction.unit_new_date - transaction.unit_old_date) * 7 + 50) *\n\t\t\t\t0.07;\n\t\t\t// resultCal.price =\n\t\t\t// \t(transaction.unit_new_date - transaction.unit_old_date) * 7 + 50;\n\t\t\tresultCal.price = a + b;\n\t\t}\n\n\t\t// Find over_due from previous month\n\t\tlet previousMonth = String(Number(month) - 1);\n\t\tlet previousYear = year;\n\n\t\tif (Number(month) === 1) {\n\t\t\tpreviousMonth = \"12\";\n\t\t\tpreviousYear = String(Number(year) - 1);\n\t\t} else if (previousMonth.length === 1) {\n\t\t\tpreviousMonth = \"0\" + previousMonth; // Add leading zero for single digit months\n\t\t}\n\n\t\tconst overDueTransaction = await prisma.transaction.findFirst({\n\t\t\twhere: {\n\t\t\t\tmonth: previousMonth,\n\t\t\t\tyear: previousYear,\n\t\t\t\tcustomerId: customerId,\n\t\t\t},\n\t\t\tselect: {\n\t\t\t\tCalculateTransactions: true,\n\t\t\t},\n\t\t\torderBy: {\n\t\t\t\tupdateAt: \"desc\",\n\t\t\t},\n\t\t});\n\n\t\t// console.log(\"overDueTransaction\", overDueTransaction);\n\n\t\t// Set over_due value if found\n\t\tif (overDueTransaction && overDueTransaction.CalculateTransactions) {\n\t\t\tresultCal.over_due =\n\t\t\t\toverDueTransaction.CalculateTransactions[0].total_price;\n\t\t}\n\n\t\t// Calculate total price\n\t\tresultCal.total_price =\n\t\t\tNumber(resultCal.price) + Number(resultCal.over_due);\n\n\t\t// Create the calculateTransaction\n\t\tconst calculateTransaction = await prisma.calculateTransaction.create({\n\t\t\tdata: {\n\t\t\t\tprice: resultCal.price,\n\t\t\t\tover_due: resultCal.over_due,\n\t\t\t\ttotal_price: resultCal.total_price,\n\t\t\t\ttransactionId: transaction.id,\n\t\t\t},\n\t\t});\n\n\t\tres.status(201).json({ message: \"ok\", transaction, calculateTransaction });\n\t} catch (error) {\n\t\tnext(error);\n\t}\n};\n\nexport const getTransaction = async (\n\treq: Request,\n\tres: Response,\n\tnext: NextFunction\n) => {\n\ttry {\n\t\tconst result = await prisma.transaction.findMany({\n\t\t\tinclude: {\n\t\t\t\tcustomer: true,\n\t\t\t\tCalculateTransactions: true,\n\t\t\t},\n\t\t\torderBy: {\n\t\t\t\tcreateAt: \"desc\",\n\t\t\t},\n\t\t});\n\n\t\tres.status(200).json({ message: \"ok\", result });\n\t} catch (error) {\n\t\tnext(error);\n\t}\n};\n"],"names":["createTransaction","getTransaction","req","res","next","month","year","unit_old_date","unit_new_date","type","zoneId","paymentId","customerId","body","transaction","prisma","create","data","resultCal","price","over_due","total_price","a","b","previousMonth","String","Number","previousYear","length","overDueTransaction","findFirst","where","select","CalculateTransactions","orderBy","updateAt","calculateTransaction","transactionId","id","status","json","message","error","result","findMany","include","customer","createAt"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;;;;IAGaA,iBAAiB;eAAjBA;;IAsGAC,cAAc;eAAdA;;;iDAzGM;;;;;;AAGZ,MAAMD,oBAAoB,OAChCE,KACAC,KACAC;IAEA,IAAI;QACH,MAAM,EACLC,KAAK,EACLC,IAAI,EACJC,aAAa,EACbC,aAAa,EACbC,IAAI,EACJC,MAAM,EACNC,SAAS,EACTC,UAAU,EACV,GAAGV,IAAIW,IAAI;QAEZ,MAAMC,cAAc,MAAMC,eAAM,CAACD,WAAW,CAACE,MAAM,CAAC;YACnDC,MAAM;gBACLZ;gBACAC;gBACAC;gBACAC;gBACAC;gBACAC;gBACAC;gBACAC;YACD;QACD;QAEA,IAAIM,YAAY;YACfC,OAAO;YACPC,UAAU;YACVC,aAAa;QACd;QAEA,IAAIP,YAAYL,IAAI,KAAK,KAAK;YAC7BS,UAAUC,KAAK,GACd,AAACL,CAAAA,YAAYN,aAAa,GAAGM,YAAYP,aAAa,AAAD,IAAK,KAAK;QACjE,OAAO,IAAIO,YAAYL,IAAI,KAAK,KAAK;YACpC,IAAIa,IAAI,AAACR,CAAAA,YAAYN,aAAa,GAAGM,YAAYP,aAAa,AAAD,IAAK,IAAI;YACtE,IAAIgB,IACH,AAAC,CAAA,AAACT,CAAAA,YAAYN,aAAa,GAAGM,YAAYP,aAAa,AAAD,IAAK,IAAI,EAAC,IAChE;YAGDW,UAAUC,KAAK,GAAGG,IAAIC;QACvB;QAGA,IAAIC,gBAAgBC,OAAOC,OAAOrB,SAAS;QAC3C,IAAIsB,eAAerB;QAEnB,IAAIoB,OAAOrB,WAAW,GAAG;YACxBmB,gBAAgB;YAChBG,eAAeF,OAAOC,OAAOpB,QAAQ;QACtC,OAAO,IAAIkB,cAAcI,MAAM,KAAK,GAAG;YACtCJ,gBAAgB,MAAMA;QACvB;QAEA,MAAMK,qBAAqB,MAAMd,eAAM,CAACD,WAAW,CAACgB,SAAS,CAAC;YAC7DC,OAAO;gBACN1B,OAAOmB;gBACPlB,MAAMqB;gBACNf,YAAYA;YACb;YACAoB,QAAQ;gBACPC,uBAAuB;YACxB;YACAC,SAAS;gBACRC,UAAU;YACX;QACD;QAKA,IAAIN,sBAAsBA,mBAAmBI,qBAAqB,EAAE;YACnEf,UAAUE,QAAQ,GACjBS,mBAAmBI,qBAAqB,CAAC,EAAE,CAACZ,WAAW;QACzD;QAGAH,UAAUG,WAAW,GACpBK,OAAOR,UAAUC,KAAK,IAAIO,OAAOR,UAAUE,QAAQ;QAGpD,MAAMgB,uBAAuB,MAAMrB,eAAM,CAACqB,oBAAoB,CAACpB,MAAM,CAAC;YACrEC,MAAM;gBACLE,OAAOD,UAAUC,KAAK;gBACtBC,UAAUF,UAAUE,QAAQ;gBAC5BC,aAAaH,UAAUG,WAAW;gBAClCgB,eAAevB,YAAYwB,EAAE;YAC9B;QACD;QAEAnC,IAAIoC,MAAM,CAAC,KAAKC,IAAI,CAAC;YAAEC,SAAS;YAAM3B;YAAasB;QAAqB;IACzE,EAAE,OAAOM,OAAO;QACftC,KAAKsC;IACN;AACD;AAEO,MAAMzC,iBAAiB,OAC7BC,KACAC,KACAC;IAEA,IAAI;QACH,MAAMuC,SAAS,MAAM5B,eAAM,CAACD,WAAW,CAAC8B,QAAQ,CAAC;YAChDC,SAAS;gBACRC,UAAU;gBACVb,uBAAuB;YACxB;YACAC,SAAS;gBACRa,UAAU;YACX;QACD;QAEA5C,IAAIoC,MAAM,CAAC,KAAKC,IAAI,CAAC;YAAEC,SAAS;YAAME;QAAO;IAC9C,EAAE,OAAOD,OAAO;QACftC,KAAKsC;IACN;AACD"}